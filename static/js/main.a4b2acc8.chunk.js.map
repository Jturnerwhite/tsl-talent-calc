{"version":3,"sources":["modules/TalentTree/Talent.js","modules/TalentTree/TalentTree.js","modules/TalentTree/talentActions.js","modules/TalentTree/TalentTreePage.js","App.js","modules/TalentTree/talentTreeReducer.js","index.js"],"names":["Talent","props","talent","talentData","toggleTalent","buttonClasses","icon","wrapperClasses","assigned","className","onClick","onContextMenu","event","preventDefault","TalentBranch","canToggleTalent","value","priorTalent","branchData","talents","find","preTal","id","nextTalent","updateTalent","this","length","branchContents","map","index","classes","key","Component","TalentTree","updateTree","updateTalentTree","talentTree","cost","points","branches","pointsMax","talentBranches","branch","BaseTalentTree","name","description","connect","state","loading","errors","dispatch","isInitialized","useEffect","document","title","type","payload","error","style","color","App","basename","exact","path","component","TalentTreePage","to","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","render","getElementById"],"mappings":"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","file":"static/js/main.a4b2acc8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './talent.scss';\r\n\r\nexport const Talent = props => {\r\n    let talent = props.talentData;\r\n    const toggleTalent = props.toggleTalent;\r\n    let buttonClasses = \"tt-talent__button tt-talent__button--\" + talent.icon;\r\n    let wrapperClasses = \"tt-talent\";\r\n    if (talent.assigned)\r\n        wrapperClasses += \" tt-talent--active\";\r\n\r\n    const contextMenu = (event) => {\r\n        event.preventDefault();\r\n        toggleTalent(props.talentData, false);\r\n    }\r\n\r\n    return (\r\n        <div className={wrapperClasses}>\r\n            <button className={buttonClasses} onClick={() => {toggleTalent(props.talentData, true);}} onContextMenu={contextMenu}/>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\r\n\r\nimport { Talent } from './Talent';\r\n\r\nexport class TalentBranch extends Component {\r\n    canToggleTalent = (talent, value) => {\r\n        if (talent.assigned === value)\r\n            return false;\r\n\r\n        let priorTalent = this.props.branchData.talents.find(preTal => preTal.id === talent.id - 1);\r\n        let nextTalent = this.props.branchData.talents.find(preTal => preTal.id === talent.id + 1);\r\n\r\n        if (!talent.assigned) {\r\n            // First talent is always able to be toggled on\r\n            return (!priorTalent || priorTalent.assigned);\r\n        } else {\r\n            // Can't break the talent tree chain!\r\n            return (!nextTalent || !nextTalent.assigned);\r\n        }\r\n    }\r\n\r\n    updateTalent = (talent, value) => {\r\n        if (this.canToggleTalent(talent, value))\r\n            this.props.toggleTalent(talent);\r\n    }\r\n\r\n    render() {\r\n        const branchData = this.props.branchData;\r\n    \r\n        if (branchData && branchData.talents && branchData.talents.length > 0) {\r\n            let branchContents = branchData.talents.map((talent, index) => {\r\n                let classes = \"tt__leaf\";\r\n                if (index === branchData.talents.length - 1)\r\n                    classes += \" tt__leaf--hide-path\";\r\n                if (talent.assigned)\r\n                    classes += \" tt__leaf--active\";\r\n\r\n    \r\n                return (\r\n                    <div key={index} className={classes}>\r\n                        <Talent talentData={talent} toggleTalent={this.updateTalent}/>\r\n                    </div>\r\n                );\r\n            });\r\n    \r\n            return (\r\n                <div className=\"tt__branch\">\r\n                    <div className=\"tt__leaf tt__branch-name\">\r\n                        <label className=\"tt__text\">{branchData.id}</label>\r\n                    </div>\r\n                    {branchContents}\r\n                </div>\r\n            );\r\n        } else {\r\n            return <h1>There was an error loading Talent Tree Branches</h1>;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TalentTree extends Component {\r\n    updateTree = () => {\r\n        this.props.updateTalentTree(this.props.talentTree);\r\n    }\r\n\r\n    canToggleTalent = talent => {\r\n        return talent.assigned || (talent.cost <= this.props.talentTree.points);\r\n    }\r\n \r\n    toggleTalent = talent => {\r\n        if (this.canToggleTalent(talent)) {\r\n            this.props.talentTree.points += talent.assigned ? talent.cost : -talent.cost;\r\n            talent.assigned = !talent.assigned;\r\n            this.updateTree();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { branches, points, pointsMax } = this.props.talentTree;\r\n\r\n        const talentBranches = branches.map((branch, index) => {\r\n            return <TalentBranch key={index} branchData={branch} toggleTalent={this.toggleTalent}/>\r\n        });\r\n\r\n        return (\r\n            <div className=\"talent-tree\">\r\n                <h1 className=\"tt__heading\">TitanStar Legends - Rune Mastery Loadout Talent Calculator 9000</h1>\r\n                <div className=\"tt__row\">\r\n                    <div className=\"tt__col tt__branch-container\">\r\n                        {talentBranches}\r\n                    </div>\r\n                    <div className=\"tt__col\">\r\n                        <div className=\"tt__point-container\">\r\n                            <label className=\"tt__text tt__text\">{points} / {pointsMax}</label>\r\n                            <label className=\"tt__text tt__text--theme-color\">Points Spent</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","export const GET_TALENT_TREE = 'GET_TALENT_TREE';\r\nexport const GET_TALENT_TREE_SUCCESS = 'GET_TALENT_TREE_SUCCESS';\r\nexport const GET_TALENT_TREE_FAILURE = 'GET_TALENT_TREE_FAILURE';\r\nexport const UPDATE_TALENT_TREE = 'UPDATE_TALENT_TREE';\r\n\r\n// Establishing the data here, as usually this would be where we reach out to another service, or API directly for data.\r\nconst BaseTalentTree = {\r\n    branches: [\r\n        {\r\n            id: \"Talent Path 1\",\r\n            talents: [\r\n                { id:1, name: \"Stacker\", icon:\"stack\", branch:\"Blue Magic\", description: \"All bonuses of the same type now stack (Without this skill, same-typed bonuses do not stack).\", cost: 1, assigned: false },\r\n                { id:2, name: \"Snacker\", icon:\"snack\", branch:\"Blue Magic\", description: \"Get a bonus to each stat equal to the number of different type of bonus you have applied. (This does include this bonus)\", cost: 1, assigned: false },\r\n                { id:3, name: \"Gourmand\", icon:\"cake\", branch:\"Blue Magic\", description: \"All other bonuses double in value.\", cost: 1, assigned: false },\r\n                { id:4, name: \"Gluttony King\", icon:\"crown\", branch:\"Blue Magic\", description: \"All other bonuses quadruple in value.  This overrides Gourmand.\", cost: 1, assigned: false },\r\n            ]\r\n        },\r\n        {\r\n            id: \"Talent Path 2\",\r\n            talents: [\r\n                { id:5, name: \"Ship-Shape\", icon:\"boat\", branch:\"Ocean Magic\", description: \"Once per day, you can (as a free action) make yourself immune to sea sickness until your next short or long rest.\", cost: 1, assigned: false },\r\n                { id:6, name: \"Diver\", icon:\"diver\", branch:\"Ocean Magic\", description: \"You can hold your breath twice as long.\", cost: 1, assigned: false },\r\n                { id:7, name: \"Soul of the Eel\", icon:\"lightning\", branch:\"Ocean Magic\", description: \"Once per day you can activate this ability. Doing so will coat you in an electric aura, dealing 1d4 damage to any melee attackers that hit you for the next 1d8 turns.\", cost: 1, assigned: false },\r\n                { id:8, name: \"Shipwreck\", icon:\"skull\", branch:\"Ocean Magic\", description: \"Summon a ghost of a dead sailor to fight for you.\", cost: 1, assigned: false },\r\n            ]\r\n        }\r\n    ],\r\n    points: 6,\r\n    pointsMax: 6\r\n};\r\n\r\nexport const getTalentTree = () => ({\r\n    type: GET_TALENT_TREE,\r\n});\r\n\r\nexport const getTalentTreeSuccess = talentTree => ({\r\n    type: GET_TALENT_TREE_SUCCESS,\r\n    payload: talentTree,\r\n});\r\n\r\n// more of a placeholder, but this would be used if getting data from an API\r\nexport const getTalentTreeFailure = () => ({\r\n    type: GET_TALENT_TREE_FAILURE\r\n});\r\n\r\nexport const updateTalentTree = talentTree => {\r\n    return {\r\n        type: UPDATE_TALENT_TREE,\r\n        payload: talentTree,\r\n    }\r\n};\r\n\r\nexport function fetchTalentTree() {\r\n    // Not Async but would be in a real scenario\r\n    return dispatch => {\r\n        dispatch(getTalentTree());\r\n\r\n        try {\r\n            const data = BaseTalentTree; // this would be where we usually call a service or API for data\r\n            // if not in a seperate service, do data mutation/parsing here before returning.\r\n\r\n            dispatch(getTalentTreeSuccess(data));\r\n        } catch (error) {\r\n            dispatch(getTalentTreeFailure());\r\n        }\r\n    };\r\n}","import React, { useEffect, Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { TalentTree } from './TalentTree';\r\nimport { fetchTalentTree, updateTalentTree } from './talentActions';\r\n\r\nimport './talent-tree.scss';\r\n\r\nconst TalentTreePage = ({ dispatch, talentTree, loading, errors }) => {\r\n    const isInitialized = talentTree && talentTree.branches && talentTree.branches.length > 0;\r\n\r\n    // On Page/Component load:\r\n    useEffect(() => {\r\n        document.title = \"TS:Legends - Talent Tree\";\r\n        dispatch(fetchTalentTree());\r\n    }, [dispatch]); // ditch redundant updates if dispatch is the same\r\n\r\n    const updateTree = (talentTree) => {\r\n        //updateTalentTree(talentTree);\r\n        dispatch(updateTalentTree({...talentTree}));\r\n    };\r\n\r\n    const renderTree = () => {\r\n        if (loading) \r\n            return <h2>Loading talent tree...</h2>\r\n        if (errors)\r\n            return <h2>Unable to display talent tree.</h2>\r\n        if (isInitialized) {\r\n            return <TalentTree talentTree={talentTree} updateTalentTree={updateTree}/>;\r\n        }\r\n\r\n        return <h2 style={{color:'white'}}>Unable to display talent tree.</h2>\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            {renderTree()}\r\n        </section>\r\n    );\r\n};\r\n\r\n// Parsing data from state into properties for the page would be done\r\n// This is very useful for multiple components/pages that rely on the same state\r\nconst mapStateToProps = state => {\r\n    // state.[name specified for reducer in combineReducer].propname\r\n    return {\r\n        loading: state.talents.loading,\r\n        talentTree: state.talents.talentTree,\r\n        errors: state.talents.errors,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(TalentTreePage);","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport TalentTreePage from './modules/TalentTree/TalentTreePage';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router basename=\"/tsl-talent-calc/\">\r\n            <Switch>\r\n                <Route exact path=\"/\" component={TalentTreePage} />\r\n                <Redirect to=\"/\" />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","import * as actions from './talentActions';\r\n\r\nexport const initialState = {\r\n    talentTree: {},\r\n    loading: false,\r\n    errors: false\r\n}\r\n\r\nexport default function talentTreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case actions.GET_TALENT_TREE:\r\n            return { ...state, loading: true };\r\n        case actions.GET_TALENT_TREE_SUCCESS:\r\n            return { talentTree: action.payload, loading: false, errors: false };\r\n        case actions.GET_TALENT_TREE_FAILURE:\r\n            return { ...state, loading: false, errors: true };\r\n        case actions.UPDATE_TALENT_TREE:\r\n            return { ...state, talentTree:action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport App from './App';\r\nimport talentTreeReducer from './modules/TalentTree/talentTreeReducer';\r\n\r\nimport './base.scss';\r\n\r\n// would be useful if additional reducers are needed\r\nconst rootReducer = combineReducers({\r\n    talents: talentTreeReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}